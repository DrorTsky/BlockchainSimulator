{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dror/WebProjects/react/BlockchainProjectFront/src/BlockchainService.js\";\nimport React from \"react\";\nimport BlockGrid from \"./BlockGrid\";\nimport BlockContentTable from \"./BlockContentTable\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst {\n  Blockchain,\n  Transaction\n} = require(\"savjeecoin\");\n\nconst EC = require(\"elliptic\").ec;\n\nconst ec = new EC(\"secp256k1\");\nconst myKey = ec.keyFromPrivate(\"4001\");\n/*\ngetBalanceOfAddress\ngetAllTransactionsForWallet\n */\n// From that we can calculate your public key (which doubles as your wallet address)\n\nconst myWalletAddress = myKey.getPublic(\"hex\");\nconsole.log(\"Public key:\", myWalletAddress);\nconsole.log(\"Private key:\", myKey.getPrivate(\"hex\"));\n\nclass BlockchainService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.blockchainInstance = new Blockchain();\n\n    this.handleClick = blockId => {\n      console.log(blockId);\n      this.setState({\n        selectedBlockId: blockId\n      });\n    };\n\n    this.blockchainInstance.difficulty = this.props.difficulty;\n    this.blockchainInstance.reward = this.props.reward;\n    this.blockchainInstance.minePendingTransactions(\"my-wallet-address\");\n    this.getBlocks = this.getBlocks.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      selectedBlockId: null,\n      difficulty: this.props.difficulty,\n      reward: this.props.reward,\n      blocks: this.getBlocks()\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty) {\n      this.setState({\n        difficulty: parseInt(this.props.difficulty)\n      });\n      this.blockchainInstance.difficulty = parseInt(this.props.difficulty);\n    }\n\n    if (prevProps.reward !== this.props.reward) {\n      this.setState({\n        reward: parseInt(this.props.reward)\n      });\n      this.blockchainInstance.miningReward = parseInt(this.props.reward);\n    }\n\n    if (prevProps.isChanged !== this.props.isChanged) {\n      var transaction = new Transaction(this.props.transactionFromAddress, this.props.transactionToAddress, parseInt(this.props.transactionAmount));\n      transaction.signTransaction(myKey);\n      this.blockchainInstance.addTransaction(transaction);\n      this.props.pendingBlocks(this.blockchainInstance.pendingTransactions);\n    }\n\n    if (prevProps.isMined !== this.props.isMined) {\n      this.blockchainInstance.minePendingTransactions(myWalletAddress);\n      this.setState({\n        blocks: this.getBlocks()\n      });\n      this.props.pendingBlocks(this.blockchainInstance.pendingTransactions);\n      this.props.setMinersAddress(myWalletAddress);\n      this.props.setWallet(prevState => ({\n        balanceDror: this.blockchainInstance.getBalanceOfAddress(\"dror\"),\n        balanceVlad: this.blockchainInstance.getBalanceOfAddress(\"vlad\"),\n        balanceMiner: this.blockchainInstance.getBalanceOfAddress(myWalletAddress),\n        transactionsDror: this.blockchainInstance.getAllTransactionsForWallet(\"dror\"),\n        transactionsVlad: this.blockchainInstance.getAllTransactionsForWallet(\"vlad\"),\n        transactionsMiner: this.blockchainInstance.getAllTransactionsForWallet(myWalletAddress)\n      }));\n    }\n  }\n\n  getBlocks() {\n    return this.blockchainInstance.chain;\n  }\n\n  init() {\n    for (let index = 1; index < 19; index++) {\n      var transaction = new Transaction(myWalletAddress, \"vlad\", parseInt(10 + index));\n      transaction.signTransaction(myKey);\n      this.blockchainInstance.addTransaction(transaction);\n      this.props.pendingBlocks(this.blockchainInstance.pendingTransactions);\n\n      if (index % 4 === 0) {\n        this.blockchainInstance.minePendingTransactions(myWalletAddress);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BlockGrid, {\n        onChange: this.handleClick,\n        getBlocksHandler: this.getBlocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Transaction inside Block temp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockContentTable, {\n        blocks: this.getBlocks(),\n        blockId: this.state.selectedBlockId || 1 // status={user.id === this.state.selectedBlockId ? true : false}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default BlockchainService;","map":{"version":3,"sources":["/home/dror/WebProjects/react/BlockchainProjectFront/src/BlockchainService.js"],"names":["React","BlockGrid","BlockContentTable","Divider","Blockchain","Transaction","require","EC","ec","myKey","keyFromPrivate","myWalletAddress","getPublic","console","log","getPrivate","BlockchainService","Component","constructor","props","blockchainInstance","handleClick","blockId","setState","selectedBlockId","difficulty","reward","minePendingTransactions","getBlocks","bind","state","blocks","componentDidUpdate","prevProps","parseInt","miningReward","isChanged","transaction","transactionFromAddress","transactionToAddress","transactionAmount","signTransaction","addTransaction","pendingBlocks","pendingTransactions","isMined","setMinersAddress","setWallet","prevState","balanceDror","getBalanceOfAddress","balanceVlad","balanceMiner","transactionsDror","getAllTransactionsForWallet","transactionsVlad","transactionsMiner","chain","init","index","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport BlockGrid from \"./BlockGrid\";\nimport BlockContentTable from \"./BlockContentTable\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst { Blockchain, Transaction } = require(\"savjeecoin\");\nconst EC = require(\"elliptic\").ec;\nconst ec = new EC(\"secp256k1\");\n\nconst myKey = ec.keyFromPrivate(\"4001\");\n/*\ngetBalanceOfAddress\ngetAllTransactionsForWallet\n */\n\n// From that we can calculate your public key (which doubles as your wallet address)\nconst myWalletAddress = myKey.getPublic(\"hex\");\n\nconsole.log(\"Public key:\", myWalletAddress);\nconsole.log(\"Private key:\", myKey.getPrivate(\"hex\"));\n\nclass BlockchainService extends React.Component {\n  blockchainInstance = new Blockchain();\n\n  constructor(props) {\n    super(props);\n    this.blockchainInstance.difficulty = this.props.difficulty;\n    this.blockchainInstance.reward = this.props.reward;\n    this.blockchainInstance.minePendingTransactions(\"my-wallet-address\");\n\n    this.getBlocks = this.getBlocks.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      selectedBlockId: null,\n      difficulty: this.props.difficulty,\n      reward: this.props.reward,\n      blocks: this.getBlocks(),\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty) {\n      this.setState({ difficulty: parseInt(this.props.difficulty) });\n      this.blockchainInstance.difficulty = parseInt(this.props.difficulty);\n    }\n    if (prevProps.reward !== this.props.reward) {\n      this.setState({ reward: parseInt(this.props.reward) });\n      this.blockchainInstance.miningReward = parseInt(this.props.reward);\n    }\n    if (prevProps.isChanged !== this.props.isChanged) {\n      var transaction = new Transaction(\n        this.props.transactionFromAddress,\n        this.props.transactionToAddress,\n        parseInt(this.props.transactionAmount)\n      );\n      transaction.signTransaction(myKey);\n      this.blockchainInstance.addTransaction(transaction);\n      this.props.pendingBlocks(this.blockchainInstance.pendingTransactions);\n    }\n    if (prevProps.isMined !== this.props.isMined) {\n      this.blockchainInstance.minePendingTransactions(myWalletAddress);\n      this.setState({ blocks: this.getBlocks() });\n      this.props.pendingBlocks(this.blockchainInstance.pendingTransactions);\n      this.props.setMinersAddress(myWalletAddress);\n      this.props.setWallet((prevState) => ({\n        balanceDror: this.blockchainInstance.getBalanceOfAddress(\"dror\"),\n        balanceVlad: this.blockchainInstance.getBalanceOfAddress(\"vlad\"),\n        balanceMiner: this.blockchainInstance.getBalanceOfAddress(\n          myWalletAddress\n        ),\n        transactionsDror: this.blockchainInstance.getAllTransactionsForWallet(\n          \"dror\"\n        ),\n        transactionsVlad: this.blockchainInstance.getAllTransactionsForWallet(\n          \"vlad\"\n        ),\n        transactionsMiner: this.blockchainInstance.getAllTransactionsForWallet(\n          myWalletAddress\n        ),\n      }));\n    }\n  }\n  handleClick = (blockId) => {\n    console.log(blockId);\n    this.setState({ selectedBlockId: blockId });\n  };\n\n  getBlocks() {\n    return this.blockchainInstance.chain;\n  }\n\n  init() {\n    for (let index = 1; index < 19; index++) {\n      var transaction = new Transaction(\n        myWalletAddress,\n        \"vlad\",\n        parseInt(10 + index)\n      );\n      transaction.signTransaction(myKey);\n      this.blockchainInstance.addTransaction(transaction);\n      this.props.pendingBlocks(this.blockchainInstance.pendingTransactions);\n      if (index % 4 === 0) {\n        this.blockchainInstance.minePendingTransactions(myWalletAddress);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <BlockGrid\n          onChange={this.handleClick}\n          getBlocksHandler={this.getBlocks}\n        />\n        <Divider />\n        <h1>Transaction inside Block temp</h1>\n        <BlockContentTable\n          blocks={this.getBlocks()}\n          blockId={this.state.selectedBlockId || 1}\n          // status={user.id === this.state.selectedBlockId ? true : false}\n        />\n        {/* <BlockContentTable\n          blocks={this.blockchainInstance.pendingTransactions}\n          blockId={this.state.selectedBlockId || 1}\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default BlockchainService;\n"]},"metadata":{},"sourceType":"module"}