{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dror/WebProjects/react/BlockchainProjectFront/src/BlockchainService.js\";\nimport React from \"react\";\nimport BlockGrid from \"./BlockGrid\";\nimport BlockContentTable from \"./BlockContentTable\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst {\n  Blockchain\n} = require(\"savjeecoin\");\n\nclass BlockchainService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.blockchainInstance = new Blockchain();\n\n    this.handleClick = blockId => {\n      console.log(blockId);\n      this.setState({\n        selectedBlockId: blockId\n      });\n    };\n\n    this.blockchainInstance.difficulty = this.props.difficulty;\n    this.blockchainInstance.reward = this.props.reward;\n    this.blockchainInstance.minePendingTransactions(\"my-wallet-address\");\n    this.getBlocks = this.getBlocks.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      selectedBlockId: null,\n      difficulty: this.props.difficulty,\n      reward: this.props.reward\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty) {\n      this.setState({\n        difficulty: parseInt(this.props.difficulty)\n      });\n      this.blockchainInstance.difficulty = parseInt(this.props.difficulty);\n    }\n\n    if (prevProps.reward !== this.props.reward) {\n      this.setState({\n        reward: parseInt(this.props.reward)\n      });\n      this.blockchainInstance.reward = parseInt(this.props.reward);\n    }\n  }\n\n  getBlocks() {\n    return this.blockchainInstance.chain;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BlockGrid, {\n        onChange: this.handleClick,\n        getBlocksHandler: this.getBlocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Transaction inside Block temp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockContentTable, {\n        blocks: this.getBlocks,\n        blockId: this.state.selectedBlockId || 1 // status={user.id === this.state.selectedBlockId ? true : false}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default BlockchainService;","map":{"version":3,"sources":["/home/dror/WebProjects/react/BlockchainProjectFront/src/BlockchainService.js"],"names":["React","BlockGrid","BlockContentTable","Divider","Blockchain","require","BlockchainService","Component","constructor","props","blockchainInstance","handleClick","blockId","console","log","setState","selectedBlockId","difficulty","reward","minePendingTransactions","getBlocks","bind","state","componentDidUpdate","prevProps","parseInt","chain","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBC,OAAO,CAAC,YAAD,CAA9B;;AAEA,MAAMC,iBAAN,SAAgCN,KAAK,CAACO,SAAtC,CAAgD;AAG9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAFnBC,kBAEmB,GAFE,IAAIN,UAAJ,EAEF;;AAAA,SAyBnBO,WAzBmB,GAyBJC,OAAD,IAAa;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,WAAKG,QAAL,CAAc;AAAEC,QAAAA,eAAe,EAAEJ;AAAnB,OAAd;AACD,KA5BkB;;AAEjB,SAAKF,kBAAL,CAAwBO,UAAxB,GAAqC,KAAKR,KAAL,CAAWQ,UAAhD;AACA,SAAKP,kBAAL,CAAwBQ,MAAxB,GAAiC,KAAKT,KAAL,CAAWS,MAA5C;AACA,SAAKR,kBAAL,CAAwBS,uBAAxB,CAAgD,mBAAhD;AAEA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKV,WAAL,GAAmB,KAAKA,WAAL,CAAiBU,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,KAAL,GAAa;AACXN,MAAAA,eAAe,EAAE,IADN;AAEXC,MAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAFZ;AAGXC,MAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWS;AAHR,KAAb;AAKD;;AAEDK,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAACP,UAAV,KAAyB,KAAKR,KAAL,CAAWQ,UAAxC,EAAoD;AAClD,WAAKF,QAAL,CAAc;AAAEE,QAAAA,UAAU,EAAEQ,QAAQ,CAAC,KAAKhB,KAAL,CAAWQ,UAAZ;AAAtB,OAAd;AACA,WAAKP,kBAAL,CAAwBO,UAAxB,GAAqCQ,QAAQ,CAAC,KAAKhB,KAAL,CAAWQ,UAAZ,CAA7C;AACD;;AACD,QAAIO,SAAS,CAACN,MAAV,KAAqB,KAAKT,KAAL,CAAWS,MAApC,EAA4C;AAC1C,WAAKH,QAAL,CAAc;AAAEG,QAAAA,MAAM,EAAEO,QAAQ,CAAC,KAAKhB,KAAL,CAAWS,MAAZ;AAAlB,OAAd;AACA,WAAKR,kBAAL,CAAwBQ,MAAxB,GAAiCO,QAAQ,CAAC,KAAKhB,KAAL,CAAWS,MAAZ,CAAzC;AACD;AACF;;AAMDE,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKV,kBAAL,CAAwBgB,KAA/B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,QAAQ,EAAE,KAAKhB,WADjB;AAEE,QAAA,gBAAgB,EAAE,KAAKS;AAFzB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,iBAAD;AACE,QAAA,MAAM,EAAE,KAAKA,SADf;AAEE,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWN,eAAX,IAA8B,CAFzC,CAGE;;AAHF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AArD6C;;AAwDhD,eAAeV,iBAAf","sourcesContent":["import React from \"react\";\nimport BlockGrid from \"./BlockGrid\";\nimport BlockContentTable from \"./BlockContentTable\";\nimport Divider from \"@material-ui/core/Divider\";\nconst { Blockchain } = require(\"savjeecoin\");\n\nclass BlockchainService extends React.Component {\n  blockchainInstance = new Blockchain();\n\n  constructor(props) {\n    super(props);\n    this.blockchainInstance.difficulty = this.props.difficulty;\n    this.blockchainInstance.reward = this.props.reward;\n    this.blockchainInstance.minePendingTransactions(\"my-wallet-address\");\n\n    this.getBlocks = this.getBlocks.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      selectedBlockId: null,\n      difficulty: this.props.difficulty,\n      reward: this.props.reward,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty) {\n      this.setState({ difficulty: parseInt(this.props.difficulty) });\n      this.blockchainInstance.difficulty = parseInt(this.props.difficulty);\n    }\n    if (prevProps.reward !== this.props.reward) {\n      this.setState({ reward: parseInt(this.props.reward) });\n      this.blockchainInstance.reward = parseInt(this.props.reward);\n    }\n  }\n  handleClick = (blockId) => {\n    console.log(blockId);\n    this.setState({ selectedBlockId: blockId });\n  };\n\n  getBlocks() {\n    return this.blockchainInstance.chain;\n  }\n\n  render() {\n    return (\n      <div>\n        <BlockGrid\n          onChange={this.handleClick}\n          getBlocksHandler={this.getBlocks}\n        />\n        <Divider />\n        <h1>Transaction inside Block temp</h1>\n        <BlockContentTable\n          blocks={this.getBlocks}\n          blockId={this.state.selectedBlockId || 1}\n          // status={user.id === this.state.selectedBlockId ? true : false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BlockchainService;\n"]},"metadata":{},"sourceType":"module"}